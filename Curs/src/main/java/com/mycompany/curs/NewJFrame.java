package com.mycompany.curs;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template

import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.zip.*;
import javax.swing.*;


 */


import com.mycompany.curs.NewJFrame.HuffmanZipCompressor.ProgressUpdater;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

public class NewJFrame extends javax.swing.JFrame {

     private File selectedFile; 
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        jProgressBar1.setMinimum(0);
        jProgressBar1.setMaximum(100);
        
        jFileChooser1.setDialogTitle("Выберите файл");
        jFileChooser1.setFileFilter(new FileNameExtensionFilter("ZIP/DOCX Files", "zip", "docx"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jFileChooser1 = new javax.swing.JFileChooser();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Конвертировать в zip");
        jButton1.setToolTipText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Вернуть в docx");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(jButton1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(jButton1)
                .addGap(57, 57, 57)
                .addComponent(jButton2)
                .addGap(39, 39, 39)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jFileChooser1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (selectedFile == null) {
            JOptionPane.showMessageDialog(this, 
                "Сначала выберите файл в проводнике слева!",
                "Ошибка", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String fileName = selectedFile.getName().toLowerCase();
    
        if (!fileName.endsWith(".docx")) {
            JOptionPane.showMessageDialog(this, 
                "Пожалуйста, выберите файл с расширением .docx\n"
                + "Выбранный файл: " + selectedFile.getName(),
                "Неверный формат", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String inputPath = selectedFile.getAbsolutePath();
        String outputPath = inputPath.replace(".docx", "_compressed.zip");

        try {
            jProgressBar1.setValue(10);
            HuffmanZipCompressor.compressDocxToZip(inputPath, outputPath, this::updateProgress);
            
            JOptionPane.showMessageDialog(this, 
                "Файл успешно сжат и сохранён как:\n" + outputPath, 
                "Успех", JOptionPane.INFORMATION_MESSAGE);
            
            jProgressBar1.setValue(100);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, 
                "Ошибка при сжатии: " + e.getMessage(),
                "Ошибка", JOptionPane.ERROR_MESSAGE);
            jProgressBar1.setValue(0);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (selectedFile == null) {
            JOptionPane.showMessageDialog(this, 
                "Сначала выберите ZIP-файл в проводнике!",
                "Ошибка", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String fileName = selectedFile.getName().toLowerCase();
    
        if (!fileName.endsWith(".zip")) {
            JOptionPane.showMessageDialog(this, 
                "Пожалуйста, выберите файл с расширением .zip\n"
                + "Выбранный файл: " + selectedFile.getName(),
                "Неверный формат", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String inputPath = selectedFile.getAbsolutePath();
        String outputPath = inputPath.replace(".zip", "_restored.docx");

        try {
            jProgressBar1.setValue(10);
            HuffmanZipDecompressor.decompressZipToDocx(inputPath, outputPath, this::updateProgress);
            
            JOptionPane.showMessageDialog(this, 
                "Файл успешно восстановлен как:\n" + outputPath, 
                "Успех", JOptionPane.INFORMATION_MESSAGE);
            
            jProgressBar1.setValue(100);
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, 
                "Ошибка при распаковке: " + e.getMessage(),
                "Ошибка", JOptionPane.ERROR_MESSAGE);
            jProgressBar1.setValue(0);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        if (jFileChooser1.getSelectedFile() != null) {
            selectedFile = jFileChooser1.getSelectedFile();
        }
    }//GEN-LAST:event_jFileChooser1ActionPerformed
private void updateProgress(int value) {
        jProgressBar1.setValue(value);
    }
    
    
    /**
     * @param args the command line arguments
     */
    

public static class HuffmanZipCompressor {
        public static void compressDocxToZip(String inputPath, String outputPath, ProgressUpdater updater) throws IOException {
            byte[] fileData = Files.readAllBytes(Paths.get(inputPath));
            updater.update(20);
            
            byte[] compressedData = compressWithHuffman(fileData, updater);
            updater.update(70);
            
            try (ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(outputPath))) {
                ZipEntry entry = new ZipEntry("compressed.huff");
                zos.putNextEntry(entry);
                zos.write(compressedData);
                zos.closeEntry();
            }
            updater.update(90);
        }

        private static byte[] compressWithHuffman(byte[] data, ProgressUpdater updater) throws IOException {
            Map<Byte, Integer> frequencyMap = new HashMap<>();
            for (byte b : data) {
                frequencyMap.put(b, frequencyMap.getOrDefault(b, 0) + 1);
            }
            updater.update(30);

            PriorityQueue<HuffmanNode> pq = new PriorityQueue<>();
            for (Map.Entry<Byte, Integer> entry : frequencyMap.entrySet()) {
                pq.add(new HuffmanNode(entry.getKey(), entry.getValue()));
            }
            updater.update(40);

            while (pq.size() > 1) {
                HuffmanNode left = pq.poll();
                HuffmanNode right = pq.poll();
                HuffmanNode parent = new HuffmanNode((byte) 0, left.frequency + right.frequency);
                parent.left = left;
                parent.right = right;
                pq.add(parent);
            }
            updater.update(50);

            HuffmanNode root = pq.poll();

            Map<Byte, String> huffmanCodes = new HashMap<>();
            generateCodes(root, "", huffmanCodes);
            updater.update(60);

            StringBuilder encodedData = new StringBuilder();
            for (byte b : data) {
                encodedData.append(huffmanCodes.get(b));
            }
            updater.update(70);

            byte[] compressedBytes = convertBitStringToBytes(encodedData.toString());
            updater.update(80);

            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            try (ObjectOutputStream oos = new ObjectOutputStream(outputStream)) {
                oos.writeObject(huffmanCodes);
                oos.writeInt(data.length);
                oos.write(compressedBytes);
            }
            updater.update(90);

            return outputStream.toByteArray();
        }

        private static void generateCodes(HuffmanNode node, String code, Map<Byte, String> huffmanCodes) {
            if (node == null) return;
            if (node.left == null && node.right == null) {
                huffmanCodes.put(node.data, code);
            }
            generateCodes(node.left, code + "0", huffmanCodes);
            generateCodes(node.right, code + "1", huffmanCodes);
        }

        private static byte[] convertBitStringToBytes(String bitString) {
            int length = (bitString.length() + 7) / 8;
            byte[] bytes = new byte[length];
            for (int i = 0; i < bitString.length(); i++) {
                if (bitString.charAt(i) == '1') {
                    bytes[i / 8] |= (1 << (7 - (i % 8)));
                }
            }
            return bytes;
        }

        static class HuffmanNode implements Comparable<HuffmanNode> {
            byte data;
            int frequency;
            HuffmanNode left, right;

            HuffmanNode(byte data, int frequency) {
                this.data = data;
                this.frequency = frequency;
            }

            @Override
            public int compareTo(HuffmanNode other) {
                return this.frequency - other.frequency;
            }
        }
    

    @FunctionalInterface
    interface ProgressUpdater {
        void update(int value);
    }
    }
    

public static class HuffmanZipDecompressor {
        public static void decompressZipToDocx(String zipPath, String docxPath, ProgressUpdater updater) 
            throws IOException, ClassNotFoundException {

            try (ZipInputStream zis = new ZipInputStream(new FileInputStream(zipPath))) {
                ZipEntry entry = zis.getNextEntry();
                
                if (!"compressed.huff".equals(entry.getName())) {
                    throw new IOException("Неверный формат архива");
                }
                
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                byte[] buffer = new byte[1024];
                int len;
                while ((len = zis.read(buffer)) > 0) {
                    baos.write(buffer, 0, len);
                }
                updater.update(30);
                
                try (ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()))) {
                    @SuppressWarnings("unchecked")
                    Map<Byte, String> huffmanCodes = (Map<Byte, String>) ois.readObject();

                    int originalSize = ois.readInt();

                    byte[] compressedData = ois.readAllBytes();
                    updater.update(60);

                    byte[] originalData = decompressWithHuffman(compressedData, huffmanCodes, originalSize);
                    updater.update(80);
                    
                    Files.write(Paths.get(docxPath), originalData);
                    updater.update(100);
                }
            }
        }
        
        private static byte[] decompressWithHuffman(byte[] compressedData, 
                                                  Map<Byte, String> huffmanCodes,
                                                  int originalSize) {
            Map<String, Byte> reverseCodes = new HashMap<>();
            for (Map.Entry<Byte, String> entry : huffmanCodes.entrySet()) {
                reverseCodes.put(entry.getValue(), entry.getKey());
            }

            StringBuilder bitString = new StringBuilder();
            for (byte b : compressedData) {
                String binaryString = String.format("%8s", Integer.toBinaryString(b & 0xFF)).replace(' ', '0');
                bitString.append(binaryString);
            }

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            StringBuilder currentCode = new StringBuilder();
            
            for (int i = 0; i < bitString.length(); i++) {
                currentCode.append(bitString.charAt(i));
                if (reverseCodes.containsKey(currentCode.toString())) {
                    baos.write(reverseCodes.get(currentCode.toString()));
                    currentCode.setLength(0);
                    
                    if (baos.size() == originalSize) {
                        break;
                    }
                }
            }
            
            return baos.toByteArray();
        }
    }


    
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables
}
